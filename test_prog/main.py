import json
from datetime import date

class WorkDB: ###
    def __init__(self) -> None:
        self.file_path = 'main.json'

    def add_zap(self, new_data): ###
        with open('main.json', 'r', encoding='utf-8') as f:
            data = json.load(f)
        keys=list(data.keys())
        second_key=keys[-1]
        data[str(int(second_key) + 1)] = new_data
        with open('main.json', 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
            return 'Новая запись успешно добавлена'

    def bal(self): ###
        pass

class Main:
    def __init__(self): ## Добавить списки для каждого действия
        self.actions = ['1', '2', '3', '4', '1.', '2.', '3.', '4.', 'вывод баланса', 'добавление записи', 'редактирование записи', 'поиск по записям']
        self.actions_1 = ['1', '1.', 'вывод баланса']
        self.actions_2 = ['2', '2.', 'добавление записи']
        self.actions_2_1 = ['1', '1.', 'расход']
        self.actions_2_2 = ['2', '2.', 'доход']        
        self.actions_3 = ['3', '3.', 'редактирование записи']
        self.actions_4 = ['4', '4.', 'поиск по записям']
        self.add_zap = {
                'Дата': '',
                'Категория': '',
                'Сумма': '',
                'Описание': ''                
            }

    def main(self, deytv): ###
        work_db = WorkDB()
        if deytv in self.actions_1:
            return f'Ваш балланс равен: {WorkDB.bal}' ###
        
        elif deytv in self.actions_2:
            user_input = input('Выберите категорию записи:\n1. Расход\n2. Доход\n> ')
            if user_input.lower() in self.actions_2_1:
                self.add_zap['Категория'] = 'Расход'
            elif user_input.lower() in self.actions_2_2:
                self.add_zap['Категория'] = 'Доход'
            while True:
                try:
                    self.add_zap['Сумма'] = int(input('Введите сумму:\n> '))
                    break
                except ValueError:
                    print('Введите число а не строку')
            self.add_zap['Описание'] = input('Введите описание:\n> ')
            today = date.today()
            formatted_date = today.strftime("%d-%m-%Y")
            self.add_zap['Дата']=formatted_date
            return work_db.add_zap(self.add_zap) ###
        
        elif deytv in self.actions_3:
            return "Редактирование записи"
        
        elif deytv in self.actions_4:
            return "Поиск по записям"

    def run(self):
        while True:
            user_input = input("Выберите действие (укажите номер или само действие):\n1. Вывод баланса\n2. Добавление записи\n3. Редактирование записи\n4. Поиск по записям\n> ").lower()
            if user_input in self.actions:
                print(self.main(user_input))
            else:
                print('Что то пошло не так. Попробуйте ещё раз')    

if __name__ == "__main__":
    app = Main()
    app.run()

# Тестовое задание: Разработка консольного приложения "Личный финансовый кошелек"

# Цель: Создать приложение для учета личных доходов и расходов.

# Основные возможности:
# 1. Вывод баланса: Показать текущий баланс, а также отдельно доходы и расходы.
# 2. Добавление записи: Возможность добавления новой записи о доходе или расходе.
# 3. Редактирование записи: Изменение существующих записей о доходах и расходах.
# 4. Поиск по записям: Поиск записей по категории, дате или сумме.

# Требования к программе:
# 1. Интерфейс: Реализация через консоль (CLI), без использования веб- или графического интерфейса (также без использования фреймворков таких как Django, FastAPI, Flask  и тд).
# 2. Хранение данных: Данные должны храниться в текстовом файле. Формат файла определяется разработчиком.
# 3. Информация в записях: Каждая запись должна содержать дату, категорию (доход/расход), сумму, описание (возможны дополнительные поля).

# Будет плюсом:
# 1. Аннотации: Аннотирование функций и переменных в коде.
# 2. Документация: Наличие документации к функциям и основным блокам кода.
# 3. Описание функционала: Подробное описание функционала приложения в README файле.
# 4. GitHub: Размещение кода программы и примера файла с данными на GitHub.
# 5. Тестирование.
# 6. Объектно-ориентированный подход программирования.

# Пример структуры данных в файле:
# Дата: 2024-05-02
# Категория: Расход
# Сумма: 1500
# Описание: Покупка продуктов

# Дата: 2024-05-03
# Категория: Доход
# Сумма: 30000
# Описание: Зарплата

# Это задание направлено на проверку навыков работы с файлами, понимания основ программирования и способности к созданию структурированного и читаемого кода. Удачи в реализации!